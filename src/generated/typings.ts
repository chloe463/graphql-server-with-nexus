/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as context from "../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Option: { // root type
    id: number; // Int!
    questionId: number; // Int!
    text: string; // String!
  }
  Query: {};
  Question: { // root type
    id: number; // Int!
    questionnaireId: number; // Int!
    required: boolean; // Boolean!
    text: string; // String!
    type: string; // String!
    typeCd: number; // Int!
  }
  Questionnaire: { // root type
    description: string; // String!
    endAt: string; // String!
    id: number; // Int!
    startAt: string; // String!
    state: string; // String!
    title: string; // String!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  Option: { // field return type
    id: number; // Int!
    questionId: number; // Int!
    text: string; // String!
  }
  Query: { // field return type
    options: NexusGenRootTypes['Option'][]; // [Option!]!
    questionnaire: NexusGenRootTypes['Questionnaire']; // Questionnaire!
    questionnaires: NexusGenRootTypes['Questionnaire'][]; // [Questionnaire!]!
    questions: NexusGenRootTypes['Question'][]; // [Question!]!
  }
  Question: { // field return type
    id: number; // Int!
    options: NexusGenRootTypes['Option'][]; // [Option!]!
    questionnaireId: number; // Int!
    required: boolean; // Boolean!
    text: string; // String!
    type: string; // String!
    typeCd: number; // Int!
  }
  Questionnaire: { // field return type
    description: string; // String!
    endAt: string; // String!
    id: number; // Int!
    questions: NexusGenRootTypes['Question'][]; // [Question!]!
    startAt: string; // String!
    state: string; // String!
    title: string; // String!
  }
}

export interface NexusGenArgTypes {
  Query: {
    questionnaire: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Option" | "Query" | "Question" | "Questionnaire";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}